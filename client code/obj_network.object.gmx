<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>client = network_create_socket(network_socket_tcp); //создание клиента
ip = get_string("Enter server ip", "127.0.0.1"); //ввод ip адреса
port = get_string("Enter port number", "10001"); //ввод номер порта
name = get_string("Enter your name", "User"); //ввод номер порта
network_connect(client, ip, port); //осуществить подключение

buffer_send = buffer_create(128, buffer_grow, 1); //создать буфер обмена

first_send = true; //отправить начальную информацию о пользователе
send = false; //требуется ли отправить сообщение
invite = 0; //кол-во приглашений
accept = false; //принять приглашение
logoff = false; //выйти из приватного чата

private_id = -1; //id приватного чата, к которому подлючен пользователь

max_users = 20;
for (i = 0; i &lt; max_users; i++)
{
    user[i] = -1;
    for_user[i] = "";
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (first_send)
{
    buffer_seek(buffer_send, buffer_seek_start, 0);
    buffer_write(buffer_send, buffer_s16, -1);   //передача начальных данных
    buffer_write(buffer_send, buffer_string, obj_network.name);
    network_send_packet( client, buffer_send, buffer_tell(buffer_send) );
    
    first_send = false;
}
if (send)
{   
    buffer_seek(buffer_send, buffer_seek_start, 0);
    buffer_write(buffer_send, buffer_s16, 0);   //стандартное сообщение
    buffer_write(buffer_send, buffer_string, obj_input.message);
    network_send_packet( client, buffer_send, buffer_tell(buffer_send) );
    
    keyboard_string = "";
    obj_input.message = "";
    
    send = false;
}
else if (invite &gt; 0)
{
    buffer_seek(buffer_send, buffer_seek_start, 0);
    buffer_write(buffer_send, buffer_s16, 1);   //приглашение в приватный чат
    buffer_write(buffer_send, buffer_string, for_user[invite-1]);
    network_send_packet( client, buffer_send, buffer_tell(buffer_send) );
    
    invite--;
}
else if (accept)
{
    buffer_seek(buffer_send, buffer_seek_start, 0);
    buffer_write(buffer_send, buffer_s16, 2);   //принятие приглашения
    buffer_write(buffer_send, buffer_s16, private_id);
    network_send_packet( client, buffer_send, buffer_tell(buffer_send) );
    room_goto(room_private);
    
    accept = false;
}
else if (logoff)
{
    buffer_seek(buffer_send, buffer_seek_start, 0);
    buffer_write(buffer_send, buffer_s16, 3);   //отключение от приватного чата
    buffer_write(buffer_send, buffer_s16, private_id);
    network_send_packet( client, buffer_send, buffer_tell(buffer_send) );
    room_goto(room0);
    
    logoff = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>t = ds_map_find_value(async_load, "type"); //тип переданных данных

if t = network_type_data
{
    msg_buff = ds_map_find_value(async_load, "buffer");
    sender = buffer_read(msg_buff, buffer_s16);
    type = buffer_read(msg_buff, buffer_s16);
    switch(type)
        {
            case 0:
     user[sender] = instance_create(0, 0, obj_other_user);
            break;
            
            case 1:
     var message_type = buffer_read(msg_buff, buffer_s16);
     if (message_type == -1)
     {
        user[sender].name = buffer_read(msg_buff, buffer_string);
     }
     else if (message_type == 0)
     {
        obj_chat.text[obj_chat.num] = buffer_read(msg_buff, buffer_string);
        obj_chat.sender[obj_chat.num] = user[sender].name;
        obj_chat.num++;        
     }
     else if (message_type == 1)
     {
        private_id = buffer_read(msg_buff, buffer_s16);
        if (show_question(user[sender].name + " invites you to private chat."))
            accept = true;
     }
     else if (message_type == 2)
     {
        user[sender].private = true;
     }
     else if (message_type == 3)
     {
        user[sender].private = false;
     }
            break;
            
            case 2:
       with(user[sender])
       {
          instance_destroy();
       }
       user[sender] = -1;
            break;
            
        }                    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
</object>
